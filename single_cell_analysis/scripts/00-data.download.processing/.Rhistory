getwd()
setwd("E:/work/upenn/scRNA")
library(ggplot2)
library(reshape2)
library(ggbiplot)
library(cowplot)
source(file.path("util", "vis.R"))
celltye_vis <- function(input.dir, output.dir, file.list, option = "simulated"){
#Visulize projected features from different dimension reduction approaches
# Args:
#  input.dir: directory contains all projected feature files
#  output.dir: directory contains output figures
#  file.list: list contains the names of files to be analyzed
#  option: simulated or real datasets
# Output:
#  visulization figures in output directory
#
files <- list.files(input.dir)
for(j in 1:nrow(file.list)){
# get projected feature files
feature_file <- files[grep(paste(file.list[j, ], ".exp.*", sep = ""), files)]
# get celltype information
cellinfo <- sim.files[grep(paste(file.list[j, ], ".celltype.txt", sep = ""), sim.files)]
# list of different approaches
option.list <- list(tybalt_plot_d3 = "tybalt_tsne_depth3",
tybalt_plot_d2 = "tybalt_tsne_depth2",
tybalt_plot_d1 = "tybalt_tsne_depth1",
tnse_plot = "rnaseq_tsne", umap_plot = "umap",
zifa_plot = "ZIFA", pca_plot = "pca")
plot <- lapply(names(option.list),
function(x) feature_vis(feature_file, cellinfo, type = option.list[[x]], data = "simulated"))
vis.plot <- list(plot[[1]][[1]], plot[[2]][[1]], plot[[3]][[1]], plot[[4]][[1]],
plot[[5]][[1]], plot[[6]][[1]])
pdf_size <- length(feature_file)
cowplot::plot_grid(plotlist = vis.plot, ncol = 6)
ggsave(file.path (output.dir, paste(file.list[j, ], "feature.vis.pdf", sep = ".")),
width = 32, height = 5)
}
}
feature_vis <- function(feature_file, cellinfo, type = "tybalt_tsne_depth1", data = "real"){
# This function is used to visualize the projected features into 2-dimensional space
# colored by celltypes
# Args:
#  type:
#    - tybalt_tsne_depth1: projected features generated by tybalt with 1 hidden layer
#    - tybalt_tsne_depth2: tybalt with 2 hidden layers
#    - tybalt_tsne_depth3: tybalt with 3 hidden layers
#    - rnaseq_tsne: projected features generated by t-SNE
#    - umap: projected features generated by umap (https://github.com/lmcinnes/umap)
#    - ZIFA: projected features generated by umap (https://github.com/epierson9/ZIFA)
#    - pca: projected features generated by PCA
#  cellinfo: file contains celltype information
#  data: real/simulated
# Output:
#  return the ggplot object
# get filename for a specific approach
if(type == "tybalt_tsne_depth1"){
feature_file <- feature_file[grep(".*depth1_.*tybalt_tsne.*", feature_file)]
} else if(type == "tybalt_tsne_depth2"){
feature_file <- feature_file[grep(".*depth2_.*tybalt_tsne.*", feature_file)]
} else if(type == "tybalt_tsne_depth3"){
feature_file <- feature_file[grep(".*depth3_.*tybalt_tsne.*", feature_file)]
} else if(type == "rnaseq_tsne"){
feature_file <- feature_file[grep(".*depth1_rnaseq_tsne.*", feature_file)]
} else if(type == "umap"){
feature_file <- feature_file[grep(".*rnaseq_umap.*", feature_file)]
} else if(type == "ZIFA"){
feature_file <- feature_file[grep(".*rnaseq_ZIFA.*", feature_file)]
} else if(type == "pca"){
feature_file <- feature_file[grep(".*pca.*", feature_file)]
}
# extract dataset information from filename
dataset.info <- unlist(strsplit(feature_file, split = "[.]"))
if(data == "simulated"){
dataset <- paste(dataset.info[2], dataset.info[3], sep = ".")
} else{
dataset <- dataset.info[1]
}
# read file
file <- read.table(file.path(input.dir, feature_file), header = TRUE,
sep = "\t")
# get celltype information
celltype <- read.table(file.path(input.dir, cellinfo), header = TRUE,
sep = "\t")
# add sample id into PCA file
if(type == "pca"){
file <- cbind(rownames(file), file)
}
# add celltype information into file
if(data == "simulated"){
file <- cbind(file, celltype$Group)
} else{
file <- cbind(file, celltype$celltype)
}
colnames(file) <- c("id", "X1", "X2", "Group")
# remove outlier for visulization
file <- file[file$X1 > -50 & file$X2 > -50, ]
file <- file[file$X1 < 100 & file$X2 < 100, ]
feature_plot <- ggplot2::ggplot(file, aes(X1, X2)) +
geom_point(aes(colour = factor(Group)), size = 1) +
ggtitle(paste(dataset, type, sep = ".")) + xlab("") + ylab("") +
ggplot2::theme_minimal() + ggplot2::theme(plot.title = element_text(hjust = 0.5))
return(feature_plot)
}
# visulization for real data
input.dir <- file.path("features", "real_data")
real.file.list <- c("baron-human.rds")
output.dir <- getwd()
output.dir
celltye_vis(input.dir, output.dir, real.file.list, option = "real")
real.file.list
#Visulize projected features from different dimension reduction approaches
# Args:
#  input.dir: directory contains all projected feature files
#  output.dir: directory contains output figures
#  file.list: list contains the names of files to be analyzed
#  option: simulated or real datasets
# Output:
#  visulization figures in output directory
#
files <- list.files(input.dir)
#Visulize projected features from different dimension reduction approaches
# Args:
#  input.dir: directory contains all projected feature files
#  output.dir: directory contains output figures
#  file.list: list contains the names of files to be analyzed
#  option: simulated or real datasets
# Output:
#  visulization figures in output directory
#
files <- list.files(input.dir)
files
list.files(input.dir)
# visulization for real data
input.dir <- file.path("features", "real_data")
celltye_vis(input.dir, output.dir, real.file.list, option = "real")
list.files(input.dir)
#Visulize projected features from different dimension reduction approaches
# Args:
#  input.dir: directory contains all projected feature files
#  output.dir: directory contains output figures
#  file.list: list contains the names of files to be analyzed
#  option: simulated or real datasets
# Output:
#  visulization figures in output directory
#
files <- list.files(input.dir)
j = 1
files[grep(paste(file.list[j, ], ".exp.*", sep = ""), files)]
file.list <- real.file.list
file.list
files[grep(paste(file.list[j, ], ".exp.*", sep = ""), files)]
file.list[j, ]
files[grep(paste(file.list[j], ".exp.*", sep = ""), files)]
real.file.list <- data.frame("baron-human")
real.file.list[1, ]
celltye_vis(input.dir, output.dir, real.file.list, option = "real")
celltye_vis <- function(input.dir, output.dir, file.list, option = "simulated"){
#Visulize projected features from different dimension reduction approaches
# Args:
#  input.dir: directory contains all projected feature files
#  output.dir: directory contains output figures
#  file.list: list contains the names of files to be analyzed
#  option: simulated or real datasets
# Output:
#  visulization figures in output directory
#
files <- list.files(input.dir)
for(j in 1:nrow(file.list)){
# get projected feature files
feature_file <- files[grep(paste(file.list[j, ], ".exp.*", sep = ""), files)]
# get celltype information
cellinfo <- files[grep(paste(file.list[j, ], ".celltype.txt", sep = ""), sim.files)]
# list of different approaches
option.list <- list(tybalt_plot_d3 = "tybalt_tsne_depth3",
tybalt_plot_d2 = "tybalt_tsne_depth2",
tybalt_plot_d1 = "tybalt_tsne_depth1",
tnse_plot = "rnaseq_tsne", umap_plot = "umap",
zifa_plot = "ZIFA", pca_plot = "pca")
plot <- lapply(names(option.list),
function(x) feature_vis(feature_file, cellinfo, type = option.list[[x]], data = "simulated"))
vis.plot <- list(plot[[1]][[1]], plot[[2]][[1]], plot[[3]][[1]], plot[[4]][[1]],
plot[[5]][[1]], plot[[6]][[1]])
pdf_size <- length(feature_file)
cowplot::plot_grid(plotlist = vis.plot, ncol = 6)
ggsave(file.path (output.dir, paste(file.list[j, ], "feature.vis.pdf", sep = ".")),
width = 32, height = 5)
}
}
celltye_vis(input.dir, output.dir, sim.file.list, option = "simulated")
celltye_vis <- function(input.dir, output.dir, file.list, option = "simulated"){
#Visulize projected features from different dimension reduction approaches
# Args:
#  input.dir: directory contains all projected feature files
#  output.dir: directory contains output figures
#  file.list: list contains the names of files to be analyzed
#  option: simulated or real datasets
# Output:
#  visulization figures in output directory
#
files <- list.files(input.dir)
for(j in 1:nrow(file.list)){
# get projected feature files
feature_file <- files[grep(paste(file.list[j, ], ".exp.*", sep = ""), files)]
# get celltype information
cellinfo <- files[grep(paste(file.list[j, ], ".celltype.txt", sep = ""), files)]
# list of different approaches
option.list <- list(tybalt_plot_d3 = "tybalt_tsne_depth3",
tybalt_plot_d2 = "tybalt_tsne_depth2",
tybalt_plot_d1 = "tybalt_tsne_depth1",
tnse_plot = "rnaseq_tsne", umap_plot = "umap",
zifa_plot = "ZIFA", pca_plot = "pca")
plot <- lapply(names(option.list),
function(x) feature_vis(feature_file, cellinfo, type = option.list[[x]], data = "simulated"))
vis.plot <- list(plot[[1]][[1]], plot[[2]][[1]], plot[[3]][[1]], plot[[4]][[1]],
plot[[5]][[1]], plot[[6]][[1]])
pdf_size <- length(feature_file)
cowplot::plot_grid(plotlist = vis.plot, ncol = 6)
ggsave(file.path (output.dir, paste(file.list[j, ], "feature.vis.pdf", sep = ".")),
width = 32, height = 5)
}
}
celltye_vis(input.dir, output.dir, real.file.list, option = "real")
file.list <- real.file.list
head(file.list)
# get projected feature files
feature_file <- files[grep(paste(file.list[j, ], ".exp.*", sep = ""), files)]
feature_file
files[grep(paste(file.list[j, ], ".exp.*", sep = ""), files)]
j
file.list[1, ]
files
file.list[j, ]
files[grep(paste(file.list[j, ], ".exp.*", sep = ""), files)]
paste(file.list[j, ], ".exp.*", sep = "")
grep(paste(file.list[j, ], ".exp.*", sep = ""), files)
grep(paste(file.list[j, ], ".exp.*", sep = ""), files)
file.list[j, ]
as.character(file.list[j, ])
files[grep(paste(as.character(file.list[j, ]), ".exp.*", sep = ""), files)]
paste(as.character(file.list[j, ]), ".exp.*", sep = "")
real.file.list <- "baron-human.exp.rds"
files[grep(paste(file.list[j, ], ".exp.*", sep = ""), files)]
real.file.list <- data.frame("baron-human.exp.rds")
file.list <- real.file.list
files[grep(paste(file.list[j, ], ".exp.*", sep = ""), files)]
file.list[j, ]
real.file.list <- "baron-human.rds"
real.file.list <- data.frame("baron-human.exp.rds")
files[grep(paste(file.list[j, ], ".exp.*", sep = ""), files)]
paste(file.list[j, ], ".exp.*", sep = "")
real.file.list <- data.frame("baron-human.rds")
file.list <- real.file.list
paste(file.list[j, ], ".exp.*", sep = "")
files[grep(paste(file.list[j, ], ".exp.*", sep = ""), files)]
celltye_vis(input.dir, output.dir, real.file.list, option = "real")
# get projected feature files
feature_file <- files[grep(paste(file.list[j, ], ".exp.*", sep = ""), files)]
# get celltype information
cellinfo <- files[grep(paste(file.list[j, ], ".celltype.txt", sep = ""), files)]
cellinfo
feature_file
source("https://bioconductor.org/biocLite.R")
biocLite("splatter")
library(SingleCellExperiment)
install.packages("GenomeInfoDb")
source("https://bioconductor.org/biocLite.R")
biocLite("GenomeInfoDb")
library(SingleCellExperiment)
?readRDS
rds <- readRDS(url("https://scrnaseq-public-datasets.s3.amazonaws.com/scater-objects/camp2.rds"))
rds.count <- SingleCellExperiment::logcounts(rds)
head(rds.count)
setwd("E:\work\upenn\git\CZI-Latent-Assessment\single_cell_analysis\scripts\00-data.download.processing")
setwd("E:/work/upenn/git/CZI-Latent-Assessment/single_cell_analysis/scripts/00-data.download.processing")
# read real data list
data.list <- read.table("real.data.list.txt", header = FALSE)
head(data.list)
nrow(data.list)
url.link <- "https://scrnaseq-public-datasets.s3.amazonaws.com/scater-objects/"
i
i = 1
paste(url.link, data.list[i]), sep = "/")
paste(url.link, data.list[i], sep = "/")
data.list[i, ]
paste(url.link, data.list[i, ], sep = "/")
url.link <- "https://scrnaseq-public-datasets.s3.amazonaws.com/scater-objects"
# Read rds from website
rds <- readRDS(url(paste(url.link, data.list[i, ], sep = "/")))
celltype <- data.frame(sample = rownames(SingleCellExperiment::colData(rds)),
celltype = SingleCellExperiment::colData(rds)$cell_type1)
head(celltype)
library(splatter)
